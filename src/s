        String [] types = {"Minor Assessment", "Major Assessment"};
        for (int i = 1; i <= types.length; i++) {
            System.out.println("INSERT INTO Assignment_Type ( Assignment_TypeID, Assignment_Type ) VALUES ( " + i + ", ' " + types[i-1] + "' );");
        }
        for (int i = 1; i <= types.length; i++) {
            System.out.println("INSERT INTO Assignments ( Assignment_ID, Assignment_Name, Class_ID, Assignment_TypeID) VALUES ( " + i + ", ' " + types[i-1] + "' );");
        }


        /*static void generateRooms() {
                //rooms
                ArrayList<Integer> rooms = new ArrayList<>();
                for (int k = 0; k < 9; k ++) {
                    for (int w = 0; w < 4; w ++) {
                        for (int i = 1; i <= 20; i++) {
                            rooms.add(i);
                            System.out.println(floors[k] + wings[w] + i);
                        }
                    }
                }
            } */

            /*static void generateTeachers(String teacherFile) throws IOException {
                Map<String, Integer> departmentMap = new HashMap<>();
                int deptId = 1;
                int id = 1;
                try (BufferedReader br = new BufferedReader(new FileReader(teacherFile))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        String name = parts[0].trim();
                        String dept = parts[1].trim();
                        if (!departmentMap.containsKey(dept)) {
                            departmentMap.put(dept, deptId++);
                        }
                        System.out.println("INSERT INTO Teachers VALUES (" + id++ + ", '" + name + "', " + departmentMap.get(dept) + ");");
                    }
                }
            }

            static void generateCourses(String courseFile) throws IOException {
                try (BufferedReader br = new BufferedReader(new FileReader(courseFile))) {
                    String line;
                    int id = 1;
                    while ((line = br.readLine()) != null) {
                        String name = line.trim();
                        int typeId = rand.nextInt(3) + 1; // 1-3 for Elective, Regents, AP
                        System.out.println("INSERT INTO Courses VALUES (" + id++ + ", '" + name + "', " + typeId + ");");
                    }
                }
            }

            static void generateCourseTypes() {
                System.out.println("INSERT INTO Course_Type VALUES (1, 'Elective');");
                System.out.println("INSERT INTO Course_Type VALUES (2, 'Regents');");
                System.out.println("INSERT INTO Course_Type VALUES (3, 'AP');");
            }

            static void generateAssignmentTypes() {
                System.out.println("INSERT INTO Assignment_Type VALUES (1, 'Minor Assessment');");
                System.out.println("INSERT INTO Assignment_Type VALUES (2, 'Major Assessment');");
            }

            static void generateStudents(int count) {
                for (int i = 1; i <= count; i++) {
                    System.out.println("INSERT INTO Students VALUES (" + i + ", 'Student" + i + "');");
                }
            }

            static void generateClasses() {
                int id = 1;
                for (int period = 1; period <= 10; period++) {
                    for (int i = 1; i <= 5; i++) {
                        int courseId = rand.nextInt(100) + 1; // Random course
                        int teacherId = rand.nextInt(50) + 1; // Random teacher
                        int roomId = rand.nextInt(160) + 1; // Random room
                        System.out.println("INSERT INTO Classes VALUES (" + id++ + ", " + period + ", " + courseId + ", " + teacherId + ", " + roomId + ");");
                    }
                }
            }

            static void generateAssignments() {
                int id = 1;
                for (int classId = 1; classId <= 50; classId++) {
                    for (int i = 0; i < 15; i++) {
                        String name = "Assignment " + (i + 1);
                        int typeId = (i < 12) ? 1 : 2; // 12 Minor, 3 Major
                        System.out.println("INSERT INTO Assignments VALUES ('" + name + "', " + id++ + ", " + classId + ", " + typeId + ");");
                    }
                }
            }

            static void generateGrades() {
                for (int studentId = 1; studentId <= 5000; studentId++) {
                    for (int assignmentId = 1; assignmentId <= 15; assignmentId++) {
                        int grade = rand.nextInt(26) + 75; // Grades between 75 and 100
                        System.out.println("INSERT INTO Grades VALUES (" + assignmentId + ", " + grade + ", " + studentId + ");");
                    }
                }
            }

            static void generateSchedules() {
                for (int studentId = 1; studentId <= 5000; studentId++) {
                    for (int period = 1; period <= 10; period++) {
                        int classId = rand.nextInt(50) + 1; // Random class
                        System.out.println("INSERT INTO Schedule VALUES (" + studentId + ", " + classId + ");");
                    }
                }
            }
        } */



















        public static void generateClasses() {
            int totalClasses = 10; // Number of classes to generate

            // Loop through and generate classes
            for (int i = 0; i < totalClasses; i++) {
                // Randomly choose a course and room
                Courses course = Courses.get((int)(Math.random() * Courses.size()));
                Rooms room = Rooms.get((int)(Math.random() * Rooms.size()));

                // Randomly assign a teacher, ensuring no teacher is left out
                Teachers teacher = Teachers.get((int)(Math.random() * Teachers.size()));

                // Create the class instance and assign teacher, course, and room
                Classes newClass = new Classes(course, room, teacher);

                // Add the new class to the global classes list
                Classes.add(newClass);

                // Ensure that teacher is added to the course's list of classes
                if (teacher.classes == null) {
                    teacher.classes = new ArrayList<>();
                }
                teacher.classes.add(newClass); // Add class to teacher's class list
            }

            // Now, ensure that every teacher has at least one class assigned
            for (Teachers teacher : Teachers) {
                if (teacher.classes == null || teacher.classes.size() == 0) {
                    // If the teacher doesn't have any class, assign them to a new one
                    Courses defaultCourse = Courses.get((int)(Math.random() * Courses.size()));
                    Rooms defaultRoom = Rooms.get((int)(Math.random() * Rooms.size()));
                    Classes defaultClass = new Classes(defaultCourse, defaultRoom, teacher);
                    Classes.add(defaultClass);
                    teacher.classes = new ArrayList<>();
                    teacher.classes.add(defaultClass);
                }
            }
        }
